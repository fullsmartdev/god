#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'
require 'optparse'
require 'drb'

require 'daemons'

options = {:daemonize => true, :port => 17165}

OptionParser.new do |opts|
  opts.banner = <<-EOF
Usage: god [command] [options]

  Commands:
    start <watch or group name>
    stop <watch or group name>
    monitor <watch or group name>
    unmonitor <watch or group name>

  Options:
EOF

  opts.on("-cCONFIG", "--config-file CONFIG", "Configuration file") do |x|
    options[:config] = x
  end
  
  opts.on("-pPORT", "--port PORT", "Communications port") do |x|
    options[:port] = x
  end
  
  opts.on("-PFILE", "--pid FILE", "Where to write the PID file") do |x|
    options[:pid] = x
  end
  
  opts.on("-lFILE", "--log FILE", "Where to write the log file") do |x|
    options[:log] = x
  end
  
  opts.on("-D", "--no-daemonize", "Don't daemonize") do
    options[:daemonize] = false
  end
  
  opts.on("-v", "--version", "Print the version number and exit") do
    options[:version] = true
  end
  
  opts.on("-V", "Print extended version and build information") do
    options[:info] = true
  end
end.parse!

if options[:version]
  require 'god'
  
  # print version
  puts "Version #{God::VERSION}"
  exit!
elsif options[:info]
  require 'god'
  
  puts "Version: #{God::VERSION}"
  puts "Polls: enabled"
  puts "Events: " + God::EventHandler.event_system
  
  exit!
elsif command = ARGV[0]
  require 'god'
  
  # a command was specified
  
  # disable at_exit
  # module God; def self.at_exit; end; end
  
  # get the name of the watch/group
  name = ARGV[1]
  
  # connect to remote drb
  DRb.start_service
  server = DRbObject.new nil, "druby://localhost:#{options[:port]}"
  
  begin
    puts "Sending '#{command}' command"
    
    # send command
    watches = server.control(name, command)
    
    # output response
    puts 'The following watches were affected:'
    watches.each do |w|
      puts '  ' + w.name
    end
  rescue God::InvalidCommandError
    abort "Command '#{command}' is not valid. Run 'god --help' for usage"
  end
  
  exit!
else
  # start god
  if !options[:daemonize]
    require 'god'
    load File.expand_path(options[:config])
  else
    pid = fork do
      begin
        require 'god'
        
        log_file = options[:log] || "/dev/null"
        
        STDIN.reopen "/dev/null"
        STDOUT.reopen(log_file, "a")
        STDERR.reopen STDOUT
        
        puts "Starting god"
      
        unless God::EventHandler.loaded?
          puts
          puts "***********************************************************************"
          puts "*"
          puts "* Event conditions are not available for your installation of god."
          puts "* You may still use and write custom conditions using the poll system"
          puts "*"
          puts "***********************************************************************"
          puts
        end
    
        puts "Resetting file descriptors"
        
        puts "Loading config"
      
        load File.expand_path(options[:config])
      rescue => e
        File.open('god.log', 'a') { |f| f.puts e.message + "\n" + e.backtrace }
        abort "!!! ERROR !!!"
      end
    end
  
    if options[:pid]
      File.open(options[:pid], 'w') { |f| f.write pid }
    end
  
    ::Process.detach pid
  
    exit!
  end
end
