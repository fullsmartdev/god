#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'
require 'optparse'
require 'drb'

require 'daemons'
require 'god'

options = {:daemonize => true, :port => 17165}

OptionParser.new do |opts|
  opts.banner = <<-EOF
Usage: god [command] [options]

  Commands:
    start <watch or group name>
    stop <watch or group name>
    monitor <watch or group name>
    unmonitor <watch or group name>

  Options:
EOF

  opts.on("-cCONFIG", "--config-file CONFIG", "Configuration file") do |x|
    options[:config] = x
  end
  
  opts.on("-pPORT", "--port PORT", "Communications port") do |x|
    options[:port] = x
  end
  
  opts.on("-D", "--no-daemonize", "Don't daemonize") do
    options[:daemonize] = false
  end
  
  opts.on("-v", "--version", "Print the version number and exit") do
    options[:version] = true
  end
end.parse!

if options[:version]
  # disable at_exit
  module God; def self.at_exit; end; end

  # print version
  puts "Version #{God::VERSION}"
  exit
elsif command = ARGV[0]
  # a command was specified
  
  # disable at_exit
  module God; def self.at_exit; end; end
  
  # get the name of the watch/group
  name = ARGV[1]
  
  # connect to remote drb
  DRb.start_service
  server = DRbObject.new nil, "druby://localhost:#{options[:port]}"
  
  begin
    puts "Sending '#{command}' command"
    
    # send command
    watches = server.control(name, command)
    
    # output response
    puts 'The following watches were affected:'
    watches.each do |w|
      puts '  ' + w.name
    end
  rescue God::InvalidCommandError
    abort "Command '#{command}' is not valid. Run 'god --help' for usage"
  end
else
  # start god
  
  unless God::EventHandler.loaded?
    puts
    puts "***********************************************************************"
    puts "*"
    puts "* Event conditions are not available for your installation of god."
    puts "* You may still use and write custom conditions using the poll system"
    puts "*"
    puts "***********************************************************************"
    puts
  end
  
  options[:config] = File.expand_path(options[:config]) if options[:config]

  Daemons.daemonize if options[:daemonize]

  load options[:config]
end
